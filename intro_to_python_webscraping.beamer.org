#+TITLE: Introduction to Python and Webscraping
#+Author: Robert Vesco
#+LaTeX_HEADER: \institute[ILO]{Yale School of Management \\ Initiative on Leadership and Organization (ILO)}
#+LaTeX_CLASS: beamer
#+BEAMER_THEME: Montpellier
#+BEAMER_COLOR_THEME: beaver
#+BEAMER_INNER_THEME: rounded
#+BEAMER_OUTER_THEME: infolines
#+BEAMER_FONT_THEME: professionalfonts
#+OPTIONS: H:3
#+OPTIONS: toc:nil
 # #+Latex_header: \setbeameroption{show only notes}
 # #+Latex_header: \setbeameroption{show notes}
#+Latex_header: \input{preamble.tex}
#+Latex_header: \usepackage{attachfile2}
#+Latex_header: \usepackage{hyperref}
#+Latex_header: \setbeamertemplate{itemize/enumerate subbody begin}{\vspace{0.1cm}}
#+Latex_header: \setbeamertemplate{itemize/enumerate subbody end}{\vspace{0.1cm}}
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

* Intro
*** Class Objectives

- Introduce basic python relevant to webscraping
- Provide skills & knowledge not in online tutorials
http://techcrunch.com/2014/05/24/dont-believe-anyone-who-tells-you-learning-to-code-is-easy/
- Tools that can be used with any programming language
- Real time googling, SO and problem-solving
- Provide some guidance for your personal projects

*** Plan
- Content
  - Why Python?
  - Working From the Command Line
  - Python
  - Webscraping
  - Discuss sites YOU want to scrape
  - Development environments
- Breaks 
  - 10:30 (10 min)
  - 12:00 Lunch (30 min)
  - 1:30 (10 min)


* Python Context

*** Opinionated Semi-History of Programming Languages

- C, C++ 
- Awk, Sed & shell scripts
- Practical Extraction and Reporting (perl)
- S (R precursor)
- Java 
- Ruby
- R 
- Haskell
- Clojure (Incanter)
- Python
- Julia 

*** Python and Stats

[[file:./images/lang_and_regression.png]]

*** Python and Stats
#+attr_latex: :width 3in
[[file:./images/jobs_stats.png]]

*** Stats and Journals

[[file:./images/lang_in_journals.png]]

*** Homogenization of Programming

http://www.talyarkoni.org/blog/2013/11/18/the-homogenization-of-scientific-computing-or-why-python-is-steadily-eating-other-languages-lunch/ 

- TLDR: One tool for many problems

*** Python Considerations
**** Support For						      :BMCOL:
   :PROPERTIES:
   :BEAMER_env: block
   :BEAMER_col: 0.4
   :BEAMER_envargs: C[t]
   :END:
- Readability & Consistency (pythonic)
- Fairly fast
- Not Java
- Used in biz ops & domains

**** Support Against					      :B_block:BMCOL:
   :PROPERTIES:
   :BEAMER_env: block
   :BEAMER_col: 0.4
    :END:
- Backward compatibility
- Fragile package dependencies
- Fragmentation
- Complementary Assets for Science

*** The many faces and versions of Python

- Cython (python to c to python)
- IronPython (.net)
- PyPy (JIT)
- Jython (Java)
- Ipython (scientific and interactive)

*** Version 2 vs 3

Python 3 is killing Python
https://medium.com/@deliciousrobots/5d2ad703365d/ 
\\

Python 3 can revive Python \\
https://medium.com/p/2a7af4788b10

- Python 3 is to Python what Windows 8 is to Windows
- Important: Python 3 broke compatibility

*** Interactive Python (IPYTHON)

- Designed for interactive work & scientists
- Lots of useful features
  - Tab completion
  - object?, object??
  - %run scriptname
  - press up shows last command
  - %who shows all variables
  - !cmd lets you run terminal commands
- Terminal friendly


* Terminals

*** Why Terminals and Command Line Programs?

- Troubleshooting python programs
- Managing programs and files (very important for webscraping)
- Right tool for some jobs


*** CD - Change Directory 

#+BEGIN_SRC sh
pwd #your current path or %pwd 

mkdir test_dir #create directory

ls -laG #Show all files in directory

cd test_dir #folder = directory

cd ../../ #move up two directories

cd - #move back to last directory

cd #move to home directory

cd ~/test_dir #move to folder relative to home directory

touch test_dir/test_file.txt

rmdir test_dir #must be empty, so fails

rm -rf test_dir #-rf = recursive and force -- dangerous
#+END_SRC
 

*** Open files in text editor
- Mac
#+BEGIN_SRC sh 
open -t filename.ext #default editor for extension
open -a TextEdit filename.ext #forces textedit
#alias textedit='open -a TextEdit' For .bashrc
#+END_SRC
- Windows 
#+BEGIN_SRC sh
notepad filename.txt
#+END_SRC
- Terminal Viewer (useful for super large files)
#+BEGIN_SRC sh
less -SN filename.txt
#+END_SRC


*** Sudo, Elevated Rights, Admin

- Mac/Linux: sudo cmd file
- Windows: runas /user:admin
- Best to minimize programs running at elevated rights
- Modifying system files usually require this. 


*** File Permissions

#+BEGIN_SRC sh
ls -laG #show all files and permissions
#+END_SRC

D = directory \\
4 = Read (r) \\
2 = Write (w) \\
1 = Execute(x) \\
777 = All rights for User, Group, Everyone <= BAD

- What is rwx-rw-r-- in numerical permissions?
- When will sudo be needed?

- Scripts will often need execution rights
#+BEGIN_SRC sh
chmod +x filename
#+END_SRC


*** Finding programs and scripts
- Depends on operating system

#+BEGIN_SRC sh
where programname
which programname #will give unix style path on windows
whereis programname #not on all programs
#+END_SRC



*** Simple Scripts
- Scripts should begin with #!PathToYourExecutable
#+BEGIN_SRC sh
#non-standard script
echo "print 'hello world'" > test.py
cat test.py # shows contents
ls -laG #look at the file 

python test.py 

echo -e "#\!PATHTOYOURPYTHON \n print 'hello world'" > test.py
less test.py #spits it out to terminal to viewer
./test.py
#+END_SRC
- How can we make the second way work?

#+BEGIN_SRC sh
which env 
# !#/path/to/env python #absolute path not needed
#+END_SRC

**** Notes: 
     :PROPERTIES:
     :BEAMER_env: note
     :END:


*** Find

- Flexibly file finder -- very important for webscraping
- Criteria: permissions, size, date, users, file type, dir ...

#+BEGIN_SRC sh
find dir -options option \;

find . -maxdepth 1 -type f -name "*.py" -print -exec chmod +x {} \;
# . = current directory
# maxdepth = 1 directory down
# f = files only, not directories
# *.py = all .py file endings
# - exec = execute a command on found files
# {} variable container for found files
# need to be closed \; when using exec
#+END_SRC

http://www.tecmint.com/35-practical-examples-of-linux-find-command/


*** Git 
- Git is a code versioning tool, but used to redistribute software
- Github is a website that hosts repositories

#+BEGIN_SRC sh
# last part creates a directory with that name. Use . If already in dir of choice.
git clone git://github.com/rlvesco7/teaching_intro_python_web python_web
#or 
git clone https://github.com/rlvesco7/teaching_intro_python_web python_web
#+END_SRC

*** Shells vs Terminals

- Shells are programs (like python) that help you interact computer.
  - csh (c shell, mostly seen on older servers)
  - bash (most common)
  - zsh (most convenient)
- Terminals are wrappers around shells (iterm2 for macs)
- .bashrc, .cshrc, .zshrc are configuration files for shells


*** Paths
- One of the biggest causes of angst
- Exists at system and user levels
- Order matters; read first > read second
#+BEGIN_SRC sh
#in bash, zsh 

#in windows (dos)
path %path%;C:\Python #temp
# see control panel > environment variables for permanent
#+END_SRC
- Macs/linux
#+BEGIN_SRC sh
/etc/paths #admin levels for mac
/etc/environment #admin
~/.bashrc #user level for mac/linux
export PATH="$PATH:/usr/local/bin/python"
PATH=$PATH:/my/new/path #temporary
#+END_SRC

*** Terminal Configuration
http://www.tldp.org/LDP/abs/html/sample-bashrc.html
#+BEGIN_SRC sh
cd  # changes to your home directory
#open -t .bashrc #mac
#notepad .bashrc #windows
#gedit .bashrc #likely on linux
#+END_SRC
- Add: 
#+BEGIN_SRC sh
alias la = "ls -lahG" #shortcut for listing files in directory
#export PATH="$HOME/python_web/wget/:$PATH" #for windows
#+END_SRC
- now you need to update your config file
#+BEGIN_SRC sh
. .bashrc
#or 
source .bashrc
#+END_SRC

*** Wget 
- Flexible, fast tool for downloading & spidering
#+BEGIN_SRC sh :tangle pdfwget.txt
wget -r -H -l1 -erobots=off -nd -A 'pa02*.zip' http://www.google.com/googlebooks/uspto-patents-applications-text.html

# -r = recursive
# -H = to span domains, ie can leave blog ???
# -l1 = only to the depth of one
# -erobots=off = ignore robots.txt
# -nd = don't follow directory structure, just drop all files into folder
# -A 'pa01*.zip" = download only links with this regex

#xargs -i wget 'http://storage.googleapis.com/patents/grant_full_text/2012/{}' < list2012missing.txt

unzip \* #to unzip a bunch of zip files
#+END_SRC
\textattachfile[color =  0.5 0.5 0.5]{pdfwget.txt}{view source}

*** Sed

- Stream Editor -- operates line by line
- Cleaning text files
http://sed.sourceforge.net/sed1line.txt 

#+BEGIN_SRC sh
sed '1d' #deletes first line of a text file
sed "s/$//" #convert unix to dos
sed 's/^/     /' #insert 5 blank spaces
# substitute "foo" with "bar" ONLY for lines which contain "baz"
sed '/baz/s/foo/bar/g'
#+END_SRC

*** Head, Tails, Less

#+BEGIN_SRC sh
head filename 
head filename > newsmallfile
tail filename
less -SN filename #add line numbers and don't wrap
#+END_SRC

*** Grep & Chaining Commands & SDTOUT
- Grep is for finding text within files and standard output
- | "the pipe" is for chaining commands together
- > redirects stdout to file
- Can be combined with python scripts
#+BEGIN_SRC sh
grep -i "path" ~/.bashrc

la | grep org
cat pdfwget.txt | head | grep wget #grep is taking in stdout
#+END_SRC
- Exercise: Find how to integrate system command with your statistical system (sas, r, stata)


* Python

*** Anaconda and Spydyer

- Anaconda is a pre-packaged python distribution for scientists
- Spyder is an IDE (Integrated Development Environment)
- Open a terminal and type: spyder& 

#+BEGIN_SRC sh
#cd ~/anaconda/bin/
#spyder
#+END_SRC


** Basics


*** Programming Concepts 

- Types (int, strings)
- Data Structures
- Variables
- Flow structures
- Function, Objects and Modules
- Scripting and Programs

*** Getting Help
- http://stackoverflow.com/
- https://docs.python.org/2/tutorial/
- http://www.tutorialspoint.com/python/
- http://www.codecademy.com/tracks/python
- help(function) gets you the "docstring"
#+BEGIN_SRC python :results output code :session :exports result
help(len)
#+END_SRC 

#+RESULTS:
#+BEGIN_SRC python
Help on built-in function len in module __builtin__:

len(...)
    len(object) -> integer

    Return the number of items of a sequence or mapping.
#+END_SRC

*** Hello World

**** Version 2 - Print Statement
#+BEGIN_SRC python
print "hello world"
#+END_SRC

#+RESULTS:
:RESULTS:
hello world
:END:

**** Version 3 - Print Function
#+BEGIN_SRC python
print("hello world")
#+END_SRC

#+RESULTS:
hello world

**** Note 
:PROPERTIES:
:BEAMER_env: note
:END:
 
- stuff and stuff


*** Comments in Python 

#+BEGIN_SRC python
# This is a single line comment
print "stuff" # This is also a comment

'''
Multiline comments 
Are surround by triple-quoted strings
'''

#+END_SRC

**** Notes: 
:PROPERTIES:
:BEAMER_env: note
:END:

- stuff and stuff2




*** Basic Types
- Numeric: int, float, long, complex
- Sequence: str, unicode, list, tuple, bytearray, buffer, xrange
#+BEGIN_SRC python :results output code :session :exports result
  var1 = "test strings"
  var2 = 3      
  type(var1) 
  type(var2)
  var3 = str(3) # conversion is possible, sometimes
  type(var3)
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
<type 'str'>
<type 'int'>
<type 'str'>
#+END_SRC

*** Data Structures
- Often considered "types" or "compound types"
- Base python has
  - lists = ['apples',44, 'peaches']
  - tuples = read-only lists = ('apples',44,'peaches')
  - sets = like lists but unique values only
  - dictionaries = key:value pairs = {'firstname':'tom','lastname':'selleck'}
    
*** Lists: Slicing
- lists are flexible. They can be nested, shrunk, combined ...
- Indexed starting with 0
- Limitation: searching for elements when you don't know index #

#+BEGIN_SRC python :results output code :session :exports result
ls = [1,"a",2,"b", 1]
ls[0]
ls[0:2]
ls[:]
ls[1:]
ls[1:4:2] #last element in step. Easy way to get odd
#+END_SRC 

#+RESULTS:
#+BEGIN_SRC python
1
[1, 'a']
[1, 'a', 2, 'b', 1]
['a', 2, 'b', 1]
['a', 'b']
#+END_SRC

*** Lists: Adding and Removing Elements

#+BEGIN_SRC python :results output code :session :exports result
ls # pre
ls.append("add to end")
ls.insert(1,"after second element")
ls.insert(-1, "after second to last")
ls.remove('a') # by value, not index
ls # post
ls.index('b')
ls.count(1)
#+END_SRC 

#+RESULTS:
#+BEGIN_SRC python
[1, 'a', 2, 'b', 1]
>>> >>> >>> >>> [1, 'after second element', 2, 'b', 1, 'after second to last', 'add to end']
3
2
#+END_SRC

*** Lists: Whole List Operations

#+BEGIN_SRC python :results output code :session :exports result
# Concatenate two lists
ls.extend(["newlist added to old"])
ls.sort()
ls
ls.reverse()
ls
#+END_SRC 

#+RESULTS:
#+BEGIN_SRC python
[1, 1, 2, 'add to end', 'after second element', 'after second to last', 'b', 'newlist added to old']
['newlist added to old', 'b', 'after second to last', 'after second element', 'add to end', 2, 1, 1]
#+END_SRC

*** Lists: List Comprehensions
- Functions on list elements, like loops
- Not recommended for complex scenarios

#+BEGIN_SRC python :results output code :session :exports result
ls2 = [str(x) for x in ls]
ls2
## nested loop, + = concat for strings
[[x+y for x in ls2] for y in ls2]
#+END_SRC 

#+RESULTS:
#+BEGIN_SRC python
['1', 'a', '2', 'b', '1']
[['11', 'a1', '21', 'b1', '11'], ['1a', 'aa', '2a', 'ba', '1a'], ['12', 'a2', '22', 'b2', '12'], ['1b', 'ab', '2b', 'bb', '1b'], ['11', 'a1', '21', 'b1', '11']]
#+END_SRC

*** Sets
- Set are like lists, but must contain unique data and can't be nested
- Allows operations such a union and intersections

#+BEGIN_SRC python :results output code :session :exports result
ls_dupes = [1,2,3,4,4,3]
st = set(ls_dupes)
print st
st2 = {1,2,3,5}
print st | st2 # union
print st & st2 # intersection
lss = list(st & st2) # convert back
#+END_SRC 

#+RESULTS:
#+BEGIN_SRC python
>>> set([1, 2, 3, 4])
>>> set([1, 2, 3, 4, 5])
set([1, 2, 3])
>>> <type 'list'>
#+END_SRC

*** Tuples
- Tuples are like lists, but they are immutable
- Memory efficient because python knows how much memory to allocate
#+BEGIN_SRC python :results output code :session :exports result
tp = () # empty tuple
tp1 = (1,) #tuple with one element (comma required)
tp2 = (1,2,3)
tp
tp1
tp2
tp2[2] #slicing uses [] not ()
#+END_SRC 

#+RESULTS:
#+BEGIN_SRC python
()
(1,)
(1, 2, 3)
3
#+END_SRC

*** Dictionaries
- Represented by key:value pairs. Know as hashes, maps, associative collections
- Key can be numbers or strings, but must be unique.
- Value can be mutable or not, can be combined with tuples
- Useful when you need a fast lookup based on custom key. 

#+BEGIN_SRC python :results output code :session :exports result
dct = {'first':1, 'second':2, 'third':3}
dct['second']
del(dct['third'])
dct.keys()
dct.values()
#+END_SRC 

#+RESULTS:
#+BEGIN_SRC python
2
['second', 'first']
[2, 1]
#+END_SRC

*** Control structures
- Python assumes non-zero, non-null values are true
- zero, null = false
- if statement; if ... else ; nested ifs
#+BEGIN_SRC python :results output code :session :exports result
var = 100
if ( var  == 100 ) : print "Value of expression is 100"
print "Good bye!"
# spacing, 4 spaces
if expression:
   statement(s)
else:
   statement(s)
#+END_SRC 

*** Control Structures
- else if
- no switches or cases in python
#+BEGIN_SRC sh
if expression1:
   statement(s)
elif expression2:
   statement(s)
elif expression3:
   statement(s)
else:
   statement(s)
#+END_SRC

*** Loops
- For
- While

#+BEGIN_SRC python :results output code :session :exports result
for num in range(10,20):  #to iterate between 10 to 20
   for i in range(2,num): #to iterate on the factors of the number
      if num%i == 0:      #to determine the first factor
         j=num/i          #to calculate the second factor
         print '%d equals %d * %d' % (num,i,j)
         break #to move to the next number, the #first FOR
   else:                  # else part of the loop
      print num, 'is a prime number'
#+END_SRC 

#+RESULTS:
#+BEGIN_SRC python
...
17 is a prime number
18 equals 2 * 9
19 is a prime number
#+END_SRC

*** Loops 
- While loops are very useful for webscraping because you don't know ex ante when conditions end
- The dreaded infinite loop
#+BEGIN_SRC python :results output code :session :exports result
count = 0
while (count < 9):
   print 'The count is:', count
   count = count + 1

print "Good bye!"
#+END_SRC 

*** Strings
:PROPERTIES:
:BEAMER_opt: shrink=10
:END: 

**** Strings vs Numbers
#+BEGIN_SRC python :results output code :session :exports result
string = "123456"
number = 123456 
string is number
int(string) is number # different "objects"
int(string)==number # testing equality of value
#+END_SRC 

#+RESULTS:
#+BEGIN_SRC python
False
False
True
#+END_SRC

**** Strings vs lists of strings

#+BEGIN_SRC python :results output code :session :exports result
a = [string]
b = [string]
a == b # compares equality
a is b # compares whether objects 
  
#+END_SRC 

#+RESULTS:
#+BEGIN_SRC python

>>> True
False
#+END_SRC

*** Objects, Methods and Functions
- Methods are functions that operate on objects
- Object: dog Method: eat
- Classes of objects: felines => cats , lions
- Functions vs Objects/Methods
http://stackoverflow.com/questions/8108688/in-python-when-should-i-use-a-function-instead-of-a-method

#+BEGIN_SRC python :results output code :session :exports result
  var1.capitalize() # method on object
  len(var1) # also method, but functional looking
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
'Test strings'
12
#+END_SRC

*** Functions
- parameter order matters, unless name=paramater
- anonymous functions use lambda keyword
- return statements without value return nothing
- Variables within function have local scope

#+BEGIN_SRC python :results output code :session :exports result
def printnum( x, y ):
    """This passes a parameter to the print statement"""
    print x, y
    return

printnum(y=3, x="printing this:")
printnum("positional ordering matter if not named", 4)
#+END_SRC 

#+RESULTS:
#+BEGIN_SRC python
printing this: 3
positional ordering matter is not named 4
#+END_SRC


*** Modules
- For science: numpy, scipy, statsmodels, lxml, beautifulsoup, pandas ... 
#+BEGIN_SRC python :results output code :session :exports result
import modulename
import modulename as shortname
import functionx from module name
#+END_SRC 

*** CSV files - Basic
#+BEGIN_SRC sh
echo -e "header1, header2\n1,2\n3,4" > test.csv
#+END_SRC
#+BEGIN_SRC python :results output code :session :exports result
import csv
fl = list(csv.reader(open("test.csv")))
header, values = fl[0], fl[1:]
header
values
fl
#+END_SRC 

#+RESULTS:
#+BEGIN_SRC python
['head1', 'head2']
[['1', '2'], ['3', '4']]
[['head1', 'head2'], ['1', '2'], ['3', '4']]
#+END_SRC

*** CSV files - Custom
- troublesome
#+BEGIN_SRC python :results output code :session :exports result
class customcsv(csv.Dialect):
    lineterminator = '\n'
    delimiter = ','
    quoting = csv.QUOTE_NONE

fl.csv = csv.reader("test.csv", dialect=customcsv)
fl.csv
#+END_SRC 

*** CSV files - Pandas - read_csv

#+BEGIN_SRC python :results output code :session :exports result
import pandas as pd
# header=none if not in file
# or read_table + sep(delimeter)
fldf = pd.read_csv("test.csv")
type(fldf) #type is different
fldf
#+END_SRC 

#+RESULTS:
#+BEGIN_SRC python
<class 'pandas.core.frame.DataFrame'>
     head1  head2
0      1      2
1      3      4

[2 rows x 2 columns]
#+END_SRC

*** CSV files - Pandas - More Options
- nrow=5 => read 5 rows
- na\(\textunderscore\)rep='NULL' => set null to NULL else empty
- index=FALSE => no indices in output
- cols=['header1','header2'] => specify columns
- For all options:
http://pandas.pydata.org/pandas-docs/version/0.13.1/generated/pandas.io.parsers.read_csv.html

*** CSV files - Pandas - to\(\_\)csv
- Many of the same options as read_csv
http://pandas.pydata.org/pandas-docs/version/0.13.1/generated/pandas.DataFrame.to_csv.html
#+BEGIN_SRC python :results output code :session :exports result
import os #to see directory contents
fldf
fldf.to_csv("files/test_out.csv")
os.listdir('files')
#+END_SRC 

#+RESULTS:
#+BEGIN_SRC python

head1  head2
0      1      2
1      3      4

[2 rows x 2 columns]
>>> ['test_out.csv']
#+END_SRC


* Webscraping

** Firefox/HTML

*** HTML/XML/JSON

- HTML is an implementation of XML (a meta language)
- JavaScript Object Notation (JSON) is replacing xml for speed and readability (api) 
- Firebug is a tool that allows you to inspect elements
- xpath plugin for firebug is useful ... but only in firefox

** XML

*** XPATH SQL for HTML/XML
- Xpath is a language that allows you to select "nodes" from xml
- Note: xpath 2.0 not implemented in all cases though many examples online
- Xpath 1.0 Tutorial
: http://www.zvon.org/comp/r/tut-XPath_1.html#Pages~List_of_XPaths
- Full reference
http://www.w3.org/TR/xpath/ 

*** XML - Loading
:PROPERTIES:
:BEAMER_opt: shrink=1
:END:

#+BEGIN_SRC python :results output code :session :exports result :tangle pdfxml.txt
xml = """
    <root>
        <name type="superhero">Batman</name>
            <sidekick>Batty</sidekick>
        <contact type="email">riseup@batman.com</contact>
        <contact type="phone">555-1212</contact>
    </root>
            """

from lxml import objectify
root = objectify.fromstring(xml) #use parse from file

print root.tag
print root.text
print root.attrib

print root.name.tag
print root.name.text
print root.name.attrib

for con in root.contact:
    print con.text
    print con.attrib
#+END_SRC 
\textattachfile[color =  0.5 0.5 0.5]{pdfxml.txt}{view source}

** JSON

*** JSON - Loading
 
#+BEGIN_SRC python :results output code :session :exports result
jsn = """
    {"name":"batman",
     "hobbies": ["fast cars", "fast planes", "spending money"],
    "buddy":"robin",
    "enemies": [{"name":"The Joker"},
                {"name":"The People of Gotham"}]
                }
"""
import json
#NOTE: loads for strings, load for files
rslt = json.loads(jsn) #put this into a form for python
print rslt
jsn_again = json.dumps(rslt) #back to json
 #+END_SRC 

 #+RESULTS:
 #+BEGIN_SRC python
{u'buddy': u'robin', u'enemies': [{u'name': u'The Joker'}, {u'name': u'The People of Gotham'}], u'name': u'batman', u'hobbies': [u'fast cars', u'fast planes', u'spending money']}
 #+END_SRC


*** JSON - Converting to DataFrames

#+BEGIN_SRC python :results output code :session :exports result
enemies = pd.DataFrame(rslt['enemies'], columns=['name'])
enemies
#+END_SRC 

#+RESULTS:
#+BEGIN_SRC python
              name
0             The Joker
1             The People of Gotham

[2 rows x 1 columns]
#+END_SRC


*** JSON - Converting to DataFrames

#+BEGIN_SRC python :results output code :session :exports result
enemies = pd.DataFrame(rslt['enemies'], columns=['name'])
enemies
#+END_SRC 

#+RESULTS:
#+BEGIN_SRC python
              name
0             The Joker
1  The People of Gotham

[2 rows x 1 columns]
#+END_SRC


*** JSON - Example
:PROPERTIES:
:BEAMER_opt: shrink=20
:END:

#+BEGIN_SRC python :results output code :session :exports result
import json
import urllib2
import pprint import pprint
import pandas as pd

prefix="http://maps.googleapis.com/maps/api/geocode/json?address="
suffix="&sensor=false"
address="165%20Whitney%20Avenue,%20New%20Haven,%20CT"
url = prefix+address+suffix
j = urllib2.urlopen(url)
js = json.load(j)
type(js) #if in doubt, check type

#pprint(js) 

#notice nested list, so use index to get into it
rstadd = js['results'][0]['address_components']

for rs in rstadd:
    print rs['short_name'], rs['types']

import pandas as pd
pd.DataFrame(rstadd)
#+END_SRC 
\textattachfile[color =  0.5 0.5 0.5]{pdfjson.txt}{view source}


*** Regular Expressions (Regex)
- Regex came from perl, used to find text patterns
- To fragile for webscraping, but important complement
http://www.rexegg.com/regex-quickstart.html

* Scraping Strategies

- Let's discuss what you're interested in
- Key things
  - How to get pages
  - How to parse
  - How to overcome efforts to not let you scrape

* Development

- Anaconda is good, but it may have limitations
- Virtual Env
- Homebrew
- Babun
- Iterm2
- Virtual Machines/Servers

* Other Resources
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:
http://www.codecademy.com/tracks/python 


